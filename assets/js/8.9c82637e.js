(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{362:function(e,t,s){"use strict";s.r(t);var a=s(42),v=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说明"}},[e._v("#")]),e._v(" 说明")]),e._v(" "),s("h2",{attrs:{id:"背景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[e._v("#")]),e._v(" 背景")]),e._v(" "),s("p",[e._v("辅导猫业务快速发展的过程中，对于移动端整体进行了全面的重构，总结过去架构中的不合理性，性能问题、打包等多个问题，我们采用了vant2.0进行基于业务的二次封装来满足业务开发，vant作为移动端最受欢迎的ui组件库，有些良好的收缩、扩展等特性，基于此和交互设计师一起确定了ui的主基调以及交互行为，尝试修改了部分vant的样式来达到产品要求，共同完成了counselor-mobile-ui的开发")]),e._v(" "),s("h2",{attrs:{id:"组件库架构设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组件库架构设计"}},[e._v("#")]),e._v(" 组件库架构设计")]),e._v(" "),s("p",[e._v("市面上大多数组件库都有着自己的架构模式，counselor-mobile-ui在设计之初需要解决如下问题")]),e._v(" "),s("ul",[s("li",[e._v("基于一个第三方组件库进行实现的同时如何避免重复打包问题，并且要满足组件库打包代码下和业务代码下只引入同一个vant版本的代码")]),e._v(" "),s("li",[e._v("在内部组件、工具方法引用时，如何避免重复打包组件问题，需要保证开发模式下、生产模式下的快速开发问题")]),e._v(" "),s("li",[e._v("在生产环境构建下如何无感知的进行版本升级而无需修改业务中的组件库版本")]),e._v(" "),s("li",[e._v("到底是基于webpack进行构建还是基于rollup构建，在实现时需要考虑生产环境体积大小")]),e._v(" "),s("li",[e._v("对于一个组件库开发环境来说，是否需要一个本地构建模式")]),e._v(" "),s("li",[e._v("开发是采用render函数还是template，或者都支持")]),e._v(" "),s("li",[e._v("样式到底是分离到独立的文件还是在vue文件中")]),e._v(" "),s("li",[e._v("在app内部运行经常调用sdk方法应该如何注入等等问题")])]),e._v(" "),s("p",[e._v("1.在选择打包工具上的问题上，前端的工具构建需要一些基础工具的支撑配合下才能更好的构建版本，基于体积、构建版本等等的选择，我们采用了rollup进行打包，并且对与重复打包问题进行了一定的处理来规避重复代码。")]),e._v(" "),s("p",[e._v("2.在生产环境和开发环境中让开发人员无感知的同步完成开发，并且无需关心业务中的组件构建形式，我们灵活的采用了babel-plugin-import这个插件来实现。")]),e._v(" "),s("p",[e._v("3.在开发业务组件时，我们采用最小化原则，对于组件进行细致切分、通过组合的方式来实现复杂的需求，并且支持template/render函数的开发模式，同时也支持样式的分离或者在.vue文件中进行书写。")]),e._v(" "),s("p",[e._v("4.构建版本上，我们优先使用esModule来投入生产环境中，并且支持cjs、umd等方式的引入")]),e._v(" "),s("p",[e._v("5.通过构建counselor-sdk包来结合counselor-mobile-ui做到多端使用sdk功能")]),e._v(" "),s("h2",{attrs:{id:"组件库目录结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组件库目录结构"}},[e._v("#")]),e._v(" 组件库目录结构")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("├── assest 静态资源\n├── build 生产环境脚本\n├── config 生产环境构建配置\n├── constant 公用常量\n├── directives 公用指令\n├── examples 本地开发测试组件库目录\n├── helper 组件库相关工具方法\n        ├── lib.js 生产环境工具方法\n        └── vue.dev.js 本地开发环境工具方法\n├── packages 组件库开发目录\n├── public 组件库本地开发资源文件\n        └── index.html\n├── styles 公用样式\n├── utils 公用方法\n        ├── feature 功能类\n        ├── modules 业务模块类\n        ├── ui 视图类\n        └── vue 框架类\n")])])])])}),[],!1,null,null,null);t.default=v.exports}}]);